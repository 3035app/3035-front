pipeline {
    agent {
        dockerfile {
            filename "etc/dockerfile.jenkins"
            additionalBuildArgs '--build-arg UID=$(id -u) --build-arg GID=$(id -g)'
            args '--network=ci.network'
        }
    }
    
    environment {
        NVM_DIR="/home/jenkins/.nvm"
        ETCDHOST="etcd.host"
        /* warnings, can't use "$HOME/.nvm" as it is not the same in docker and host ... */     
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    
    stages {
    	stage ('Where Am I') {
            steps {
                sh "uname -a"
                sh ". ${env.NVM_DIR}/nvm.sh && npm -v"
                sh ". ${env.NVM_DIR}/nvm.sh && node -v"
            }
        }

    	stage ('Set Env') {
            steps {
                sh "ETCDCTL_API=3 etcdctl put /default/api/client/id 1234 --endpoints=http://${env.ETCDHOST}:2379"
                sh "ETCDCTL_API=3 etcdctl put /default/api/client/secret 4321 --endpoints=http://${env.ETCDHOST}:2379"
                sh "ETCDCTL_API=3 etcdctl put /default/api/host/url 'http://localhost:8000' --endpoints=http://${env.ETCDHOST}:2379"
                sh "confd -onetime -backend etcdv3 -node http://${env.ETCDHOST}:2379 -confdir ./etc/confd -log-level debug -prefix /default"
                sh "cat src/environments/environment.ts"
            }
        }

        stage ('Composer Install') {
            steps {
                sh ". ${env.NVM_DIR}/nvm.sh && npm install --no-interaction"
            }
        }

        stage ('Configuration') {
            steps {
                sh "echo waiting merge of new-backend to add some config step"
            }
        }
        
        stage ('Build Project') {
            steps {
                sh ". ${env.NVM_DIR}/nvm.sh && ng build"
            }
        }
        
       /* stage ('Run Server') {
            steps {
                sh ". ${env.NVM_DIR}/nvm.sh && ng serve"
            }
        }*/
        
        stage ('Run Test') {
            steps {
                sh "echo waiting for test creation"
            }
        }
        
        stage ('Create Archive') {
            steps {
                sh "echo waiting for something smart to add in archive"
            }
        }
        
    }
    
    post {
        always {
            cleanWs()
        }
    }
}
